{"version":3,"file":"static/js/962.0100081c.chunk.js","mappings":"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","sources":["components/Contacts/Contacts.styled.jsx","components/PhonebookForm/PhoneBook.styled.jsx","components/Contacts/ListItem.styled.jsx","components/ModalWindow/ModalWindow.styled.jsx","components/ModalWindow/ModalWindow.jsx","components/Contacts/Listitem.jsx","components/Contacts/Contacts.jsx","components/FilterContacts/FilterContacts.styled.jsx","components/FilterContacts/FilterContacts.jsx","components/PhonebookForm/PhonebookForm.jsx","pages/Contacts.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Title = styled.h2`\n  font-style: italic;\n  font-family: 'Lobster', cursive;\n  letter-spacing: 4px;\n  font-size: 24px;\n  font-weight: bold;\n  margin-bottom: 20px;\n  text-align: center;\n  color: #333;\n`;\n\nexport const WrapperStyled = styled.div`\n  width: 800px;\n  margin-inline: auto;\n  background-color: rgba(248, 248, 255, 0.7);\n  border-radius: 16px;\n  margin-top: 48px;\n  box-shadow: 0px 0px 3px 0px rgba(0, 0, 0, 0.75);\n  padding-top: 20px;\n`;\n\nexport const ContactsInfoStyled = styled.div`\n  padding: 30px 90px;\n  border-radius: 16px;\n  border: 1px solid #ccc;\n  font-size: 18px;\n`;\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  padding: 0;\n`;\n\nexport const WrapperSpinnerStyled = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n","import styled from '@emotion/styled';\nimport { Form, Field } from 'formik';\n\nexport const FormStyled = styled(Form)`\n  padding: 30px 90px;\n  border-radius: 16px;\n  border: 1px solid #ccc;\n  font-size: 18px;\n`;\nexport const FieldStyled = styled(Field)`\n  padding: 10px;\n  font-size: 16px;\n  border: 2px solid #ccc;\n  border-radius: 5px;\n  box-shadow: none;\n  transition: all 0.3s ease-in-out;\n\n  &:focus {\n    outline: none;\n    border-color: #0077cc;\n    box-shadow: 0 0 0 2px rgba(0, 119, 204, 0.3);\n  }\n\n  &::placeholder {\n    color: #999;\n  }\n`;\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 20px;\n  font-family: roboto;\n`;\n\nexport const Button = styled.button`\n  width: 200px;\n  padding: 10px;\n  border-radius: 5px;\n  border: none;\n  background-color: #0077cc;\n  color: #fff;\n  font-size: 18px;\n  cursor: pointer;\n  transition: all 0.2s ease-in-out;\n\n  &:hover {\n    background-color: #005ea6;\n  }\n`;\n","import styled from '@emotion/styled';\n\nexport const Item = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 8px;\n  border-bottom: 1px solid #ccc;\n`;\n\nexport const Button = styled.button`\n  background-color: #dc3545;\n  color: #fff;\n  border: none;\n  border-radius: 4px;\n  padding: 8px 20px;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n\n  &:hover {\n    background-color: #c82333;\n  }\n`;\n\nexport const SpanStyled = styled.span`\n  margin-right: 8px;\n`;\n","import styled from '@emotion/styled';\n\nexport const ModalStyled = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.6);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const ModalContentStyled = styled.div`\n  background-color: #fff;\n  padding: 20px;\n  border-radius: 5px;\n  box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.3);\n`;\n\nexport const ModalTextStyled = styled.p`\n  margin: 0 0 20px;\n  font-size: 18px;\n  font-weight: bold;\n`;\n\nexport const ModalButtonStyled = styled.button`\n  background-color: #dc3545;\n  color: #fff;\n  border: none;\n  border-radius: 4px;\n  padding: 8px 20px;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n  &:nth-last-of-type(2) {\n    margin-right: 8px;\n  }\n\n  &:hover {\n    background-color: #c82333;\n  }\n`;\n","import { useCallback, useEffect } from 'react';\nimport {\n  ModalStyled,\n  ModalContentStyled,\n  ModalTextStyled,\n  ModalButtonStyled,\n} from './ModalWindow.styled';\nimport PropTypes from 'prop-types';\nimport { createPortal } from 'react-dom';\n\nexport const ModalWindow = ({ id, handleDelete, handleCancel }) => {\n  const handleCloseByBackdrope = useCallback(\n    event => {\n      if (event.target === event.currentTarget) handleCancel();\n    },\n    [handleCancel]\n  );\n\n  useEffect(() => {\n    window.addEventListener('mousedown', handleCloseByBackdrope);\n\n    return () => {\n      window.removeEventListener('mousedown', handleCloseByBackdrope);\n    };\n  }, [handleCloseByBackdrope]);\n\n  return createPortal(\n    <ModalStyled onClick={handleCloseByBackdrope}>\n      <ModalContentStyled>\n        <ModalTextStyled>\n          Are you sure you want to delete this contact?\n        </ModalTextStyled>\n        <ModalButtonStyled onClick={handleCancel}>Cancel</ModalButtonStyled>\n        <ModalButtonStyled onClick={() => handleDelete(id)}>\n          Delete\n        </ModalButtonStyled>\n      </ModalContentStyled>\n    </ModalStyled>,\n    document.querySelector('#modal-root')\n  );\n};\n\nModalWindow.propTypes = {\n  id: PropTypes.string.isRequired,\n  handleDelete: PropTypes.func.isRequired,\n  handleCancel: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { Item, SpanStyled } from './ListItem.styled';\nimport { Button } from './ListItem.styled';\nimport { useState } from 'react';\nimport { ModalWindow } from 'components/ModalWindow/ModalWindow';\n\nexport const ListItem = ({ contact: { name, number: phone, id }, onClick }) => {\n  const [showConfirmation, setShowConfirmation] = useState(false);\n\n  const handleCancel = () => setShowConfirmation(false);\n  const handleDelete = id => {\n    setShowConfirmation(false);\n    onClick(id);\n  };\n\n  const props = {\n    id,\n    handleCancel,\n    handleDelete,\n  };\n\n  return (\n    <>\n      <Item>\n        <SpanStyled>{name}</SpanStyled>\n        <SpanStyled>{phone}</SpanStyled>\n        <Button type=\"button\" onClick={() => setShowConfirmation(true)}>\n          Delete\n        </Button>\n      </Item>\n      {showConfirmation && <ModalWindow {...props} />}\n    </>\n  );\n};\n\nListItem.propTypes = {\n  contact: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n  }).isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { ListItem } from './Listitem';\nimport { List } from './Contacts.styled';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/operations';\n\nexport const Contacts = ({ contacts }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <List>\n        {contacts.map(contact => (\n          <ListItem\n            key={contact.id}\n            contact={contact}\n            onClick={() => {\n              dispatch(deleteContact(contact.id));\n            }}\n          />\n        ))}\n      </List>\n    </>\n  );\n};\n\nContacts.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.object.isRequired).isRequired,\n};\n","import styled from '@emotion/styled';\nimport { BiSearchAlt } from 'react-icons/bi';\n\nexport const Label = styled.label`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  margin-bottom: 10px;\n`;\n\nexport const InputStyled = styled.input`\n  padding: 10px;\n  font-size: 16px;\n  border: 2px solid #ccc;\n  border-radius: 5px;\n  box-shadow: none;\n  transition: all 0.3s ease-in-out;\n  padding-left: 29px;\n\n  &:focus {\n    outline: none;\n    border-color: #0077cc;\n    box-shadow: 0 0 0 2px rgba(0, 119, 204, 0.3);\n  }\n\n  &::placeholder {\n    color: #999;\n  }\n  &:focus::placeholder {\n    opacity: 0;\n  }\n`;\n\nexport const IconStyled = styled(BiSearchAlt)`\n  position: absolute;\n  top: 49px;\n  left: 8px;\n`;\n","import PropTypes from 'prop-types';\nimport { Label, InputStyled, IconStyled } from './FilterContacts.styled';\nimport { useDispatch } from 'react-redux';\nimport { filterContact } from 'redux/filterSlice';\n\nexport const FilterContacts = ({ filter }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <Label>\n      {' '}\n      Find contacts in your list. Simply enter the name you're looking for.\n      <IconStyled />\n      <InputStyled\n        placeholder=\"Contact name\"\n        type=\"text\"\n        name=\"filter\"\n        onChange={evt => {\n          dispatch(filterContact(evt.target.value));\n        }}\n        value={filter}\n      />\n    </Label>\n  );\n};\n\nFilterContacts.propTypes = {\n  onFilter: PropTypes.func,\n  filter: PropTypes.string.isRequired,\n};\n","import { Formik } from 'formik';\nimport { object, string } from 'yup';\nimport { FormStyled, Label, Button, FieldStyled } from './PhoneBook.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact, updateContact } from 'redux/operations';\nimport { getContactsFromState } from 'redux/contactsSlice';\nimport toast, { Toaster } from 'react-hot-toast';\n\nconst phoneBookSchema = object().shape({\n  name: string().required(),\n  phone: string().required(),\n});\n\nexport const PhonebookForm = () => {\n  const contacts = useSelector(getContactsFromState);\n  const dispatch = useDispatch();\n\n  return (\n    <Formik\n      validationSchema={phoneBookSchema}\n      initialValues={{\n        name: '',\n        phone: '',\n      }}\n      onSubmit={(values, { resetForm }) => {\n        const existingContact = contacts.filter(({ name }) => {\n          return name === values.name;\n        });\n\n        if (existingContact.length > 0) {\n          toast.error(`Contact ${values.name} updated`);\n          dispatch(\n            updateContact({\n              id: existingContact[0].id,\n              name: values.name,\n              number: values.phone,\n            })\n          );\n          resetForm();\n          return;\n        }\n\n        dispatch(addContact({ ...values }));\n        resetForm();\n      }}\n    >\n      <FormStyled>\n        <Toaster />\n        <Label>\n          Name\n          <FieldStyled placeholder=\"Enter  contact name\" name=\"name\" />\n        </Label>\n        <Label>\n          Phone\n          <FieldStyled\n            placeholder=\"Enter  contact phone\"\n            type=\"phone\"\n            name=\"phone\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          />\n        </Label>\n\n        <Button type=\"submit\">Add contact</Button>\n      </FormStyled>\n    </Formik>\n  );\n};\n","import { Contacts } from \"../components/Contacts/Contacts\"\nimport { FilterContacts } from \"../components/FilterContacts/FilterContacts\"\nimport { PhonebookForm } from \"../components/PhonebookForm/PhonebookForm\";\nimport { Title, WrapperStyled, ContactsInfoStyled, WrapperSpinnerStyled } from \"../components/Contacts/Contacts.styled\"\nimport { getContactsFromState,getIsLoading, getError } from \"redux/contactsSlice\";\nimport { getFilterState } from \"../../src/redux/filterSlice\";\nimport { fetchContacts } from \"redux/operations\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEffect } from \"react\";\nimport { Puff } from \"react-loader-spinner\";\n\n\nconst ContactsPage = () => {\n\n\n\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContactsFromState);\n  const filter = useSelector(getFilterState);\n  const isLoading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n  \n  useEffect(() => {\n\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  \n\n  \n\n\n\n  const normalizedRequest = filter.toLowerCase();\n  const filteredContacts = contacts.filter(contact => contact.name.toLowerCase().includes(normalizedRequest));\n\n\n\n  return (<>\n    \n\n      <WrapperStyled>\n\n        <Title>Add new contact</Title>\n        \n        < PhonebookForm />\n      </WrapperStyled>\n        \n    <WrapperStyled>\n      \n      <Title>Phonebook</Title>\n      <ContactsInfoStyled>\n        < FilterContacts\n          filter={filter}\n        />\n        {isLoading && !error && <WrapperSpinnerStyled><Puff\n            height=\"40\"\n            width=\"40\"\n            radius={1}\n            color=\"#e582b4\"\n            ariaLabel=\"puff-loading\"\n            wrapperClass=\"\"\n            visible={true}\n        /></WrapperSpinnerStyled>}\n        < Contacts\n          contacts={filteredContacts}\n          \n        /></ContactsInfoStyled>\n      </WrapperStyled>\n    \n  </>)\n};\nexport default ContactsPage;"],"names":["Title","styled","WrapperStyled","ContactsInfoStyled","List","WrapperSpinnerStyled","FormStyled","Form","FieldStyled","Field","Label","Button","Item","SpanStyled","ModalStyled","ModalContentStyled","ModalTextStyled","ModalButtonStyled","ModalWindow","id","handleDelete","handleCancel","handleCloseByBackdrope","useCallback","event","target","currentTarget","useEffect","window","addEventListener","removeEventListener","createPortal","onClick","document","querySelector","ListItem","contact","name","phone","number","useState","showConfirmation","setShowConfirmation","props","type","Contacts","contacts","dispatch","useDispatch","map","deleteContact","InputStyled","IconStyled","BiSearchAlt","FilterContacts","filter","placeholder","onChange","evt","filterContact","value","phoneBookSchema","object","shape","string","required","PhonebookForm","useSelector","getContactsFromState","validationSchema","initialValues","onSubmit","values","resetForm","existingContact","length","toast","updateContact","addContact","pattern","title","getFilterState","isLoading","getIsLoading","error","getError","fetchContacts","normalizedRequest","toLowerCase","filteredContacts","includes","height","width","radius","color","ariaLabel","wrapperClass","visible"],"sourceRoot":""}