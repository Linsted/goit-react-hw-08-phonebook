{"version":3,"file":"static/js/817.49fefc2a.chunk.js","mappings":"+PAIaA,GAAkBC,EAAAA,EAAAA,GAAOC,EAAAA,GAAPD,CAAH,kGAIxB,YAAgB,IAAbE,EAAY,EAAZA,MAEH,MAAkB,UAAVA,EAAoBA,EAAO,wBAElC,IAGQC,GAAkBH,EAAAA,EAAAA,GAAOC,EAAAA,GAAPD,CAAH,kGAIxB,YAAgB,IAAbE,EAAY,EAAZA,MAEH,MAAkB,UAAVA,EAAoBA,EAAO,wBAElC,IAGQE,GAAsBJ,EAAAA,EAAAA,GAAOC,EAAAA,GAAPD,CAAH,kGAI5B,YAAgB,IAAbE,EAAY,EAAZA,MAEH,MAAkB,UAAVA,EAAoBA,EAAO,wBAElC,G,oLCrBQG,EAAe,WAExB,OAAsDC,EAAAA,EAAAA,WAAS,GAA/D,eAAOC,EAAP,KAA4BC,EAA5B,KACA,GAAsDF,EAAAA,EAAAA,WAAS,GAA/D,eAAOG,EAAP,KAA4BC,EAA5B,KACA,GAA8DJ,EAAAA,EAAAA,WAAS,GAAvE,eAAOK,EAAP,KAAgCC,EAAhC,KACMC,GAAWC,EAAAA,EAAAA,MAEXC,EAAmBC,EAAAA,KAAaC,MAAM,CACxCC,KAAMF,EAAAA,KAAaG,UAAS,WAAM,IAClCC,MAAOJ,EAAAA,KAAaI,OAAM,WAAM,IAAED,UAAS,WAAM,IACjDE,SAAUL,EAAAA,KAAaG,UAAS,WAAM,MAwB1C,OACI,4BACI,SAAC,KAAD,KACA,SAAC,KAAD,CACIJ,iBAAkBA,EAClBO,cAAe,CACXJ,KAAM,GACNE,MAAO,GACPC,SAAU,IAEdE,SA9BS,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UAC5B,IAAKD,EAAON,OAASM,EAAOJ,QAAUI,EAAOH,SAQzC,OANAK,EAAAA,GAAAA,MAAA,6BAAyC,CAAEC,SAAU,OAEpDH,EAAON,KAAwCV,GAAuB,GAAtDA,GAAuB,GACvCgB,EAAOJ,MAAyCV,GAAuB,GAAtDA,GAAuB,QACxCc,EAAOH,SAAgDT,GAA2B,GAA9DA,GAA2B,IAKpDJ,GAAuB,GACvBE,GAAuB,GACvBE,GAA2B,GAC3BC,GAASe,EAAAA,EAAAA,IAASJ,IAClBC,GAEH,EAKO,SASK,kBACG,UAAC,KAAD,YACI,mBAAOI,QAAQ,OAAf,kBACA,SAAC,KAAD,CAAiBC,KAAK,OAAOZ,KAAK,OAAOa,GAAG,OAAO7B,MAAOK,EAAoByB,cAC9E,SAAC,KAAD,CAAcd,KAAK,aAEnB,mBAAOW,QAAQ,QAAf,mBACA,SAAC,KAAD,CAAiBC,KAAK,QAAQZ,KAAK,QAAQa,GAAG,QAAQ7B,MAAOO,EAAoBuB,cACjF,SAAC,KAAD,CAAcd,KAAK,cAEnB,mBAAOW,QAAQ,WAAf,sBACA,SAAC,KAAD,CAAqBC,KAAK,WAAWZ,KAAK,WAAWa,GAAG,WAAW7B,MAAOS,EAAwBqB,cAClG,SAAC,KAAD,CAAcd,KAAK,iBAEnB,SAACe,EAAA,EAAD,CAAQC,MAAM,YAAYC,QAAQ,WAAWL,KAAK,SAAlD,uBAdP,MAoBhB,EC5DD,EAbe,WAGX,OACA,4BACE,SAACM,EAAA,EAAD,WACE,+CAEF,SAAC/B,EAAD,MAIL,C","sources":["components/RegisterForm/RegisterForm.styled.jsx","components/RegisterForm/RegisterForm.jsx","pages/SignUp.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Field } from 'formik';\n\n\nexport const InputStyledName = styled(Field)`\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  padding: 8px;\n  ${({ error }) => {\n    \n    return  error === \"false\" ? error :'border: 1px solid red;'\n    \n    }}\n`;\n\nexport const InputStyledMail = styled(Field)`\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  padding: 8px;\n  ${({ error }) => {\n    \n    return  error === \"false\" ? error :'border: 1px solid red;'\n    \n    }}\n`;\n\nexport const InputStyledPassword = styled(Field)`\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  padding: 8px;\n  ${({ error }) => {\n    \n    return  error === \"false\" ? error :'border: 1px solid red;'\n    \n    }}\n`;","\nimport { Formik, Form,  ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { register } from 'redux/auth/operations';\nimport Button from '@mui/material/Button';\nimport toast, { Toaster } from 'react-hot-toast';\nimport {InputStyledName,InputStyledMail, InputStyledPassword } from \"./RegisterForm.styled\"\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\n\n\n\nexport const RegisterForm = () => { \n\n    const [errorValidationName, setErrorValidationName] = useState(false);\n    const [errorValidationMail, setErrorValidationMail] = useState(false);\n    const [errorValidationPassword, setErrorValidationPassword] = useState(false);\n    const dispatch = useDispatch();\n\n    const validationSchema = Yup.object().shape({\n        name: Yup.string().required(()=>{}),\n        email: Yup.string().email(()=>{}).required(()=>{}),\n        password: Yup.string().required(()=>{}),\n    });\n\n\n    const handleSubmit = (values, { resetForm }) => {\n        if (!values.name || !values.email || !values.password) {\n            \n            toast.error(`Please fill in all fields!`,{ duration: 1500 })\n            \n            !values.name ?   setErrorValidationName(true) : setErrorValidationName(false) ;\n            !values.email ?   setErrorValidationMail(true) : setErrorValidationMail(false) ;\n            !values.password ?   setErrorValidationPassword(true) : setErrorValidationPassword(false) ;\n            \n            return;\n        };\n    \n        setErrorValidationName(false);\n        setErrorValidationMail(false);\n        setErrorValidationPassword(false);\n        dispatch(register(values));\n        resetForm();\n\n    };\n\n    return (\n        <div>\n            <Toaster />\n            <Formik\n                validationSchema={validationSchema}\n                initialValues={{\n                    name: '',\n                    email: '',\n                    password: '',\n                }}\n                onSubmit={handleSubmit}\n            >\n                {() => (\n                    <Form>\n                        <label htmlFor=\"name\">Name\n                        <InputStyledName type=\"text\" name=\"name\" id=\"name\" error={errorValidationName.toString()} />\n                        <ErrorMessage name=\"name\" /></label>\n\n                        <label htmlFor=\"email\">Email\n                        <InputStyledMail type=\"email\" name=\"email\" id=\"email\" error={errorValidationMail.toString()} />\n                        <ErrorMessage name=\"email\" /></label>\n\n                        <label htmlFor=\"password\">Password\n                        <InputStyledPassword type=\"password\" name=\"password\" id=\"password\" error={errorValidationPassword.toString()} />\n                        <ErrorMessage name=\"password\" /></label>\n\n                        <Button color=\"secondary\" variant=\"outlined\" type='submit'>Sign Up</Button>\n                    </Form>\n                )}\n            </Formik>\n        </div>\n    );\n};\n\n\n\n\n// export const RegisterForm = () => { \n\n// const validationSchema = object().shape({\n//     name: string().required(),\n//     phone: string().required(),\n// });\n    \n    \n    \n//     return (<>\n\n//         <div>\n//             <Formik\n//                 validationSchema={validationSchema}\n//                 initialValues={{\n//                     name: '',\n//                     email: ``,\n//                     password: ''}}\n//             >\n                \n//                 <Formik />\n//         </div>\n   \n//     </>);\n// };\n\n","import { Helmet } from 'react-helmet';\nimport { RegisterForm } from 'components/RegisterForm/RegisterForm';\n\n\n\n\nconst SignUp = () => {\n\n\n    return (\n    <div>\n      <Helmet>\n        <title>Registration</title>\n      </Helmet>\n      <RegisterForm />\n    </div>\n  );\n\n};\nexport default SignUp;"],"names":["InputStyledName","styled","Field","error","InputStyledMail","InputStyledPassword","RegisterForm","useState","errorValidationName","setErrorValidationName","errorValidationMail","setErrorValidationMail","errorValidationPassword","setErrorValidationPassword","dispatch","useDispatch","validationSchema","Yup","shape","name","required","email","password","initialValues","onSubmit","values","resetForm","toast","duration","register","htmlFor","type","id","toString","Button","color","variant","Helmet"],"sourceRoot":""}