{"version":3,"file":"static/js/111.b5745655.chunk.js","mappings":"ySAgBaA,EAAQC,EAAAA,EAAAA,GAAH,8MAWLC,EAAgBD,EAAAA,EAAAA,IAAH,qPAYbE,EAAqBF,EAAAA,EAAAA,IAAH,+HAMlBG,EAAOH,EAAAA,EAAAA,GAAH,0GAOJI,EAAuBJ,EAAAA,EAAAA,IAAH,+F,yKCjDpBK,GAAaL,EAAAA,EAAAA,GAAOM,EAAAA,GAAPN,CAAH,2IASVO,GAAcP,EAAAA,EAAAA,GAAOQ,EAAAA,GAAPR,CAAH,wUAkBXS,EAAQT,EAAAA,EAAAA,MAAH,sHAOLU,EAASV,EAAAA,EAAAA,OAAH,mR,mMCjCNK,GAAaL,EAAAA,EAAAA,GAAOM,EAAAA,GAAPN,CAAH,gbAqBVW,GAAkBX,EAAAA,EAAAA,GAAOQ,EAAAA,GAAPR,CAAH,0YAoBxB,gBAAGY,EAAH,EAAGA,MAAH,MAAyB,UAAVA,EAAoBA,EAAO,wBAA1C,IAGSC,GAAkBb,EAAAA,EAAAA,GAAOQ,EAAAA,GAAPR,CAAH,6YAoBxB,gBAAGY,EAAH,EAAGA,MAAH,MAAyB,UAAVA,EAAoBA,EAAO,wBAA1C,IAGSE,GAAsBd,EAAAA,EAAAA,GAAOQ,EAAAA,GAAPR,CAAH,4YAoB5B,gBAAGY,EAAH,EAAGA,MAAH,MAAyB,UAAVA,EAAoBA,EAAO,wBAA1C,IAISG,EAAcf,EAAAA,EAAAA,MAAH,qH,qLCnFXgB,EAAY,WAIjB,IAAMC,GAAWC,EAAAA,EAAAA,MACrB,GAAsDC,EAAAA,EAAAA,WAAS,GAA/D,eAAOC,EAAP,KAA4BC,EAA5B,KACA,GAA8DF,EAAAA,EAAAA,WAAS,GAAvE,eAAOG,EAAP,KAAgCC,EAAhC,KAEMC,EAAmBC,EAAAA,KAAaC,MAAM,CAExCC,MAAOF,EAAAA,KAAaE,OAAM,WAAM,IAAEC,UAAS,WAAM,IACjDC,SAAUJ,EAAAA,KAAaG,UAAS,WAAM,MAmB1C,OACI,4BACI,SAAC,KAAD,KACA,SAAC,KAAD,CACIJ,iBAAkBA,EAClBM,cAAe,CACXH,MAAO,GACPE,SAAU,IAEdE,SAxBS,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UAC5B,IAAKD,EAAOL,QAAUK,EAAOH,SAKzB,OAJAK,EAAAA,GAAAA,MAAA,6BAAyC,CAAEC,SAAU,OACpDH,EAAOL,MAAyCN,GAAuB,GAAtDA,GAAuB,QACxCW,EAAOH,SAAgDN,GAA2B,GAA9DA,GAA2B,IAIpDN,GAASmB,EAAAA,EAAAA,IAAMJ,IACfX,GAAuB,GACvBE,GAA2B,GAC3BU,GAEH,EAKO,SAQK,kBACG,UAAC,KAAD,YAEQ,SAAC,KAAD,2BACJ,UAAC,KAAD,CAAaI,QAAQ,QAArB,mBACA,SAAC,KAAD,CAAiBC,YAAY,qBAAqBC,KAAK,QAAQC,KAAK,QAAQC,GAAG,QAAQ7B,MAAOQ,EAAoBsB,cAClH,SAAC,KAAD,CAAcF,KAAK,cAEnB,UAAC,KAAD,CAAaH,QAAQ,WAArB,sBACA,SAAC,KAAD,CAAqBC,YAAY,uBAAuBC,KAAK,WAAWC,KAAK,WAAWC,GAAG,WAAW7B,MAAOU,EAAwBoB,cACrI,SAAC,KAAD,CAAcF,KAAK,iBAEnB,SAAC,KAAD,CAAQD,KAAK,SAAUI,QAAQ,WAAWC,KAAK,QAAQC,MAAM,YAA7D,sBAZP,MAkBhB,E,UChDD,EAlBc,WAIV,OAEI,4BACI,SAACC,EAAA,EAAD,WACI,wCAGJ,SAAC9B,EAAD,MAKX,C","sources":["components/Contacts/Contacts.styled.jsx","components/PhonebookForm/PhoneBook.styled.jsx","components/RegisterForm/RegisterForm.styled.jsx","components/LoginForm/LoginForm.jsx","pages/Login.jsx"],"sourcesContent":["import styled from '@emotion/styled'\n\n// export const Section = styled.section`\n// display: flex;\n// flex-direction: column;\n// align-items: center;\n// margin-top: 100px;\n   \n//     gap: 10px;\n//     margin-inline: auto;\n//     padding: 20px;\n//     box-shadow: 0px 3px 5px 0px rgba(0,0,0,0.75);\n//     border-radius: 8px;\n//     overflow-x: auto;\n// `\n\nexport const Title = styled.h2`\nfont-style: italic;\nfont-family: 'Lobster', cursive;\nletter-spacing: 4px;\n  font-size: 24px;\n  font-weight: bold;\n  margin-bottom: 20px;\n  text-align: center;\n  color: #333;\n`;\n\nexport const WrapperStyled = styled.div`\n\n    width: 800px;\n    margin-inline: auto;\n    background-color: rgba(248, 248, 255,0.7);\n    border-radius: 16px;\n    margin-top: 48px;\n    box-shadow: 0px 0px 3px 0px rgba(0,0,0,0.75);\n    padding-top: 20px;\n\n`;\n\nexport const ContactsInfoStyled = styled.div`\n     padding: 30px 90px;\n    border-radius: 16px;\n    border: 1px solid #ccc;\n    font-size: 18px;\n`\nexport const List = styled.ul`\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n    padding: 0;\n`;\n\nexport const WrapperSpinnerStyled = styled.div`\n    display: flex;\n  justify-content: center;\n  align-items: center;\n`;","import styled from '@emotion/styled'\nimport { Form, Field } from 'formik'\n\nexport const FormStyled = styled(Form)`\n    \n\n    padding: 30px 90px;\n    border-radius: 16px;\n    border: 1px solid #ccc;\n    font-size: 18px;\n   \n`\nexport const FieldStyled = styled(Field)`\npadding: 10px;\n  font-size: 16px;\n  border: 2px solid #ccc;\n  border-radius: 5px;\n  box-shadow: none;\n  transition: all 0.3s ease-in-out;\n\n  &:focus{\n    outline: none;\n  border-color: #0077cc;\n  box-shadow: 0 0 0 2px rgba(0, 119, 204, 0.3);\n  };\n\n  &::placeholder{\n     color: #999;\n  }\n`\nexport const Label = styled.label`\n   display: flex;\n  flex-direction: column;\n  margin-bottom: 20px;\n  font-family: roboto;\n`\n\nexport const Button = styled.button`\n  \nwidth: 200px;\npadding: 10px;\n  border-radius: 5px;\n  border: none;\n  background-color: #0077cc;\n  color: #fff;\n  font-size: 18px;\n  cursor: pointer;\n  transition: all 0.2s ease-in-out;\n\n  &:hover {\n    background-color: #005ea6;\n  }\n\n`","import styled from '@emotion/styled';\nimport { Field, Form } from 'formik';\n\n\nexport const FormStyled = styled(Form)`\n display: flex;\nflex-direction: column;\nalign-items: center;\n    max-width: 800px;\n    gap: 10px;\n    margin-inline: auto;\n     background-color: rgba(248, 248, 255,0.7);\n    padding:  20px 0 ;\n    box-shadow: 0px 0px 3px 0px rgba(0,0,0,0.75);\n    border-radius: 16px;\n    overflow-x: auto;\n  margin-top: 48px;\n\n\n  \n    border-radius: 16px;\n    border: 1px solid #ccc;\n    font-size: 18px;\n`;\n\nexport const InputStyledName = styled(Field)`\n  padding: 10px;\n  width: 27vw;\n  font-size: 16px;\n  border: 2px solid #ccc;\n  border-radius: 5px;\n  box-shadow: none;\n  transition: all 0.3s ease-in-out;\n\n  &:focus{\n    outline: none;\n  border-color: #0077cc;\n  box-shadow: 0 0 0 2px rgba(0, 119, 204, 0.3);\n  };\n&:focus::placeholder {\n  opacity: 0;\n}\n  &::placeholder{\n     color: #999;\n  }\n  ${({ error }) => error === \"false\" ? error :'border: 1px solid red;'};\n`;\n\nexport const InputStyledMail = styled(Field)`\n  padding: 10px;\n  width: 27vw;\n  font-size: 16px;\n  border: 2px solid #ccc;\n  border-radius: 5px;\n  box-shadow: none;\n  transition: all 0.3s ease-in-out;\n\n  &:focus{\n    outline: none;\n  border-color: #0077cc;\n  box-shadow: 0 0 0 2px rgba(0, 119, 204, 0.3);\n  };\n  &:focus::placeholder {\n  opacity: 0;\n};\n  &::placeholder{\n     color: #999;\n  }\n  ${({ error }) => error === \"false\" ? error :'border: 1px solid red;'};\n`;\n\nexport const InputStyledPassword = styled(Field)`\nwidth: 27vw;\n padding: 10px;\n  font-size: 16px;\n  border: 2px solid #ccc;\n  border-radius: 5px;\n  box-shadow: none;\n  transition: all 0.3s ease-in-out;\n\n  &:focus{\n    outline: none;\n  border-color: #0077cc;\n  box-shadow: 0 0 0 2px rgba(0, 119, 204, 0.3);\n  };\n    &:focus::placeholder {\n  opacity: 0;\n};\n  &::placeholder{\n     color: #999;\n  }\n  ${({ error }) => error === \"false\" ? error :'border: 1px solid red;'};\n`;\n\n\nexport const LabelStyled = styled.label`\n   display: flex;\n  flex-direction: column;\n  margin-bottom: 10px;\n  font-family: roboto;\n`;\n\n\n","import { Formik,   ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport toast, { Toaster } from 'react-hot-toast';\nimport { Button } from 'components/PhonebookForm/PhoneBook.styled';\nimport {InputStyledMail, InputStyledPassword } from \"../RegisterForm/RegisterForm.styled\"\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { logIn } from 'redux/auth/operations';\nimport { FormStyled, LabelStyled } from '../RegisterForm/RegisterForm.styled';\nimport { Title } from 'components/Contacts/Contacts.styled';\n\n\nexport const LoginForm = () => { \n   \n    \n\n        const dispatch = useDispatch();\n    const [errorValidationMail, setErrorValidationMail] = useState(false);\n    const [errorValidationPassword, setErrorValidationPassword] = useState(false);\n\n    const validationSchema = Yup.object().shape({\n        \n        email: Yup.string().email(()=>{}).required(()=>{}),\n        password: Yup.string().required(()=>{}),\n    });\n\n\n    const handleSubmit = (values, { resetForm }) => {\n        if (!values.email || !values.password) {\n            toast.error(`Please fill in all fields!`,{ duration: 1500 })\n            !values.email ?   setErrorValidationMail(true) : setErrorValidationMail(false) ;\n            !values.password ?   setErrorValidationPassword(true) : setErrorValidationPassword(false) ;\n            \n            return;\n        };\n        dispatch(logIn(values));\n        setErrorValidationMail(false);\n        setErrorValidationPassword(false);\n        resetForm();\n\n    };\n\n    return (\n        <div>\n            <Toaster />\n            <Formik\n                validationSchema={validationSchema}\n                initialValues={{\n                    email: '',\n                    password: '',\n                }}\n                onSubmit={handleSubmit}\n            >\n                {() => (\n                    <FormStyled>\n\n                            <Title>Log In Form</Title>\n                        <LabelStyled htmlFor=\"email\">Email\n                        <InputStyledMail placeholder=\"Enter  your e-mail\" type=\"email\" name=\"email\" id=\"email\" error={errorValidationMail.toString()} />\n                        <ErrorMessage name=\"email\" /></LabelStyled>\n\n                        <LabelStyled htmlFor=\"password\">Password\n                        <InputStyledPassword placeholder=\"Enter  your password\" type=\"password\" name=\"password\" id=\"password\" error={errorValidationPassword.toString()} />\n                        <ErrorMessage name=\"password\" /></LabelStyled>\n\n                        <Button type='submit'  variant=\"outlined\" size=\"small\" color=\"secondary\" >Log In</Button>\n                    </FormStyled>\n                )}\n            </Formik>\n        </div>\n    );\n};\n","import { LoginForm } from 'components/LoginForm/LoginForm';\nimport { Helmet } from 'react-helmet';\n\n\n\nconst Login = () => {\n    \n\n\n    return (\n        \n        <div>\n            <Helmet>\n                <title>Login</title>\n            </Helmet>\n\n            <LoginForm />\n        </div>\n    )\n\n\n};\n\nexport default Login;"],"names":["Title","styled","WrapperStyled","ContactsInfoStyled","List","WrapperSpinnerStyled","FormStyled","Form","FieldStyled","Field","Label","Button","InputStyledName","error","InputStyledMail","InputStyledPassword","LabelStyled","LoginForm","dispatch","useDispatch","useState","errorValidationMail","setErrorValidationMail","errorValidationPassword","setErrorValidationPassword","validationSchema","Yup","shape","email","required","password","initialValues","onSubmit","values","resetForm","toast","duration","logIn","htmlFor","placeholder","type","name","id","toString","variant","size","color","Helmet"],"sourceRoot":""}