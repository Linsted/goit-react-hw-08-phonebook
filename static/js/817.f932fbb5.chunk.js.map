{"version":3,"file":"static/js/817.f932fbb5.chunk.js","mappings":"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","sources":["components/Contacts/Contacts.styled.jsx","components/PhonebookForm/PhoneBook.styled.jsx","components/RegisterForm/RegisterForm.styled.jsx","components/RegisterForm/RegisterForm.jsx","pages/SignUp.jsx"],"sourcesContent":["import styled from '@emotion/styled'\n\n// export const Section = styled.section`\n// display: flex;\n// flex-direction: column;\n// align-items: center;\n// margin-top: 100px;\n   \n//     gap: 10px;\n//     margin-inline: auto;\n//     padding: 20px;\n//     box-shadow: 0px 3px 5px 0px rgba(0,0,0,0.75);\n//     border-radius: 8px;\n//     overflow-x: auto;\n// `\n\nexport const Title = styled.h2`\nfont-style: italic;\nfont-family: 'Lobster', cursive;\nletter-spacing: 4px;\n  font-size: 24px;\n  font-weight: bold;\n  margin-bottom: 20px;\n  text-align: center;\n  color: #333;\n`;\n\nexport const WrapperStyled = styled.div`\n\n    width: 800px;\n    margin-inline: auto;\n    background-color: rgba(248, 248, 255,0.7);\n    border-radius: 16px;\n    margin-top: 48px;\n    box-shadow: 0px 0px 3px 0px rgba(0,0,0,0.75);\n    padding-top: 20px;\n\n`;\n\nexport const ContactsInfoStyled = styled.div`\n     padding: 30px 90px;\n    border-radius: 16px;\n    border: 1px solid #ccc;\n    font-size: 18px;\n`\nexport const List = styled.ul`\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n    padding: 0;\n`;\n\nexport const WrapperSpinnerStyled = styled.div`\n    display: flex;\n  justify-content: center;\n  align-items: center;\n`;","import styled from '@emotion/styled'\nimport { Form, Field } from 'formik'\n\nexport const FormStyled = styled(Form)`\n    \n\n    padding: 30px 90px;\n    border-radius: 16px;\n    border: 1px solid #ccc;\n    font-size: 18px;\n   \n`\nexport const FieldStyled = styled(Field)`\npadding: 10px;\n  font-size: 16px;\n  border: 2px solid #ccc;\n  border-radius: 5px;\n  box-shadow: none;\n  transition: all 0.3s ease-in-out;\n\n  &:focus{\n    outline: none;\n  border-color: #0077cc;\n  box-shadow: 0 0 0 2px rgba(0, 119, 204, 0.3);\n  };\n\n  &::placeholder{\n     color: #999;\n  }\n`\nexport const Label = styled.label`\n   display: flex;\n  flex-direction: column;\n  margin-bottom: 20px;\n  font-family: roboto;\n`\n\nexport const Button = styled.button`\n  \nwidth: 200px;\npadding: 10px;\n  border-radius: 5px;\n  border: none;\n  background-color: #0077cc;\n  color: #fff;\n  font-size: 18px;\n  cursor: pointer;\n  transition: all 0.2s ease-in-out;\n\n  &:hover {\n    background-color: #005ea6;\n  }\n\n`","import styled from '@emotion/styled';\nimport { Field, Form } from 'formik';\n\n\nexport const FormStyled = styled(Form)`\n display: flex;\nflex-direction: column;\nalign-items: center;\n    max-width: 800px;\n    gap: 10px;\n    margin-inline: auto;\n     background-color: rgba(248, 248, 255,0.7);\n    padding:  20px 0 ;\n    box-shadow: 0px 0px 3px 0px rgba(0,0,0,0.75);\n    border-radius: 16px;\n    overflow-x: auto;\n  margin-top: 48px;\n\n\n  \n    border-radius: 16px;\n    border: 1px solid #ccc;\n    font-size: 18px;\n`;\n\nexport const InputStyledName = styled(Field)`\n  padding: 10px;\n  width: 27vw;\n  font-size: 16px;\n  border: 2px solid #ccc;\n  border-radius: 5px;\n  box-shadow: none;\n  transition: all 0.3s ease-in-out;\n\n  &:focus{\n    outline: none;\n  border-color: #0077cc;\n  box-shadow: 0 0 0 2px rgba(0, 119, 204, 0.3);\n  };\n&:focus::placeholder {\n  opacity: 0;\n}\n  &::placeholder{\n     color: #999;\n  }\n  ${({ error }) => error === \"false\" ? error :'border: 1px solid red;'};\n`;\n\nexport const InputStyledMail = styled(Field)`\n  padding: 10px;\n  width: 27vw;\n  font-size: 16px;\n  border: 2px solid #ccc;\n  border-radius: 5px;\n  box-shadow: none;\n  transition: all 0.3s ease-in-out;\n\n  &:focus{\n    outline: none;\n  border-color: #0077cc;\n  box-shadow: 0 0 0 2px rgba(0, 119, 204, 0.3);\n  };\n  &:focus::placeholder {\n  opacity: 0;\n};\n  &::placeholder{\n     color: #999;\n  }\n  ${({ error }) => error === \"false\" ? error :'border: 1px solid red;'};\n`;\n\nexport const InputStyledPassword = styled(Field)`\nwidth: 27vw;\n padding: 10px;\n  font-size: 16px;\n  border: 2px solid #ccc;\n  border-radius: 5px;\n  box-shadow: none;\n  transition: all 0.3s ease-in-out;\n\n  &:focus{\n    outline: none;\n  border-color: #0077cc;\n  box-shadow: 0 0 0 2px rgba(0, 119, 204, 0.3);\n  };\n    &:focus::placeholder {\n  opacity: 0;\n};\n  &::placeholder{\n     color: #999;\n  }\n  ${({ error }) => error === \"false\" ? error :'border: 1px solid red;'};\n`;\n\n\nexport const LabelStyled = styled.label`\n   display: flex;\n  flex-direction: column;\n  margin-bottom: 10px;\n  font-family: roboto;\n`;\n\n\n","\nimport { Formik, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { register } from 'redux/auth/operations';\nimport toast, { Toaster } from 'react-hot-toast';\nimport {InputStyledName, LabelStyled, InputStyledMail, InputStyledPassword, FormStyled } from \"./RegisterForm.styled\"\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Button } from 'components/PhonebookForm/PhoneBook.styled';\nimport { Title } from 'components/Contacts/Contacts.styled';\nimport { FcLeave } from \"react-icons/fc\";\nimport { getIasLoggedInSelector } from 'redux/auth/allSelectors';\n\n\n\nexport const RegisterForm = () => { \n\n    const [errorValidationName, setErrorValidationName] = useState(false);\n    const [errorValidationMail, setErrorValidationMail] = useState(false);\n    const [errorValidationPassword, setErrorValidationPassword] = useState(false);\n    const dispatch = useDispatch();\n    const  isLoggedIn  = useSelector(getIasLoggedInSelector)\n\n    const validationSchema = Yup.object().shape({\n        name: Yup.string().required(()=>{}),\n        email: Yup.string().email(()=>{}).required(()=>{}),\n        password: Yup.string().required(()=>{}),\n    });\n\n\n    const handleSubmit = (values, { resetForm }) => {\n        if (!values.name || !values.email || !values.password) {\n            \n            toast.error(`Please fill in all fields!`,{ duration: 1500 })\n            \n            !values.name ?   setErrorValidationName(true) : setErrorValidationName(false) ;\n            !values.email ?   setErrorValidationMail(true) : setErrorValidationMail(false) ;\n            !values.password ?   setErrorValidationPassword(true) : setErrorValidationPassword(false) ;\n            \n            return;\n        };\n    \n        setErrorValidationName(false);\n        setErrorValidationMail(false);\n        setErrorValidationPassword(false);\n        dispatch(register(values));\n        resetForm();\n\n    };\n\n    return (\n        <>\n            <Toaster />\n            <Formik\n                validationSchema={validationSchema}\n                initialValues={{\n                    name: '',\n                    email: '',\n                    password: '',\n                }}\n                onSubmit={handleSubmit}\n            >\n                {() => (\n                    <FormStyled>\n                        <Title>Registration form</Title>\n                        <LabelStyled htmlFor=\"name\">Your name\n                        <InputStyledName placeholder=\"Enter  your name\" type=\"text\" name=\"name\" id=\"name\" error={errorValidationName.toString()} />\n                        <ErrorMessage name=\"name\" /></LabelStyled>\n\n                        <LabelStyled htmlFor=\"email\">Your e-mail\n                        <InputStyledMail placeholder=\"Enter  your e-mail\" type=\"email\" name=\"email\" id=\"email\" error={errorValidationMail.toString()} />\n                        <ErrorMessage name=\"email\" /></LabelStyled>\n\n                        <LabelStyled htmlFor=\"password\">Your password\n                        <InputStyledPassword placeholder=\"Enter  your password\" type=\"password\" name=\"password\" id=\"password\" error={errorValidationPassword.toString()} />\n                        <ErrorMessage name=\"password\" /></LabelStyled>\n                        {isLoggedIn && <p style={{ color: \"red\", fontSize: \"22px\" }}><FcLeave /> Please note that you already have an account.</p>}\n                        <Button type='submit'>Create account</Button>\n                        \n                    </FormStyled>\n                )}\n            </Formik>\n\n        </>\n    );\n};\n\n\n\n\n","import { Helmet } from 'react-helmet';\nimport { RegisterForm } from 'components/RegisterForm/RegisterForm';\n\n\n\n\nconst SignUp = () => {\n\n\n    return (\n    <div>\n      <Helmet>\n        <title>Registration</title>\n      </Helmet>\n      <RegisterForm />\n    </div>\n  );\n\n};\nexport default SignUp;"],"names":["Title","styled","WrapperStyled","ContactsInfoStyled","List","WrapperSpinnerStyled","FormStyled","Form","FieldStyled","Field","Label","Button","InputStyledName","error","InputStyledMail","InputStyledPassword","LabelStyled","RegisterForm","useState","errorValidationName","setErrorValidationName","errorValidationMail","setErrorValidationMail","errorValidationPassword","setErrorValidationPassword","dispatch","useDispatch","isLoggedIn","useSelector","getIasLoggedInSelector","validationSchema","Yup","shape","name","required","email","password","initialValues","onSubmit","values","resetForm","toast","duration","register","htmlFor","placeholder","type","id","toString","style","color","fontSize","Helmet"],"sourceRoot":""}