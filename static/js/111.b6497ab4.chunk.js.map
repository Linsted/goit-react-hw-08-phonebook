{"version":3,"file":"static/js/111.b6497ab4.chunk.js","mappings":"+PAIaA,GAAkBC,EAAAA,EAAAA,GAAOC,EAAAA,GAAPD,CAAH,kGAIxB,YAAgB,IAAbE,EAAY,EAAZA,MAEH,MAAkB,UAAVA,EAAoBA,EAAO,wBAElC,IAGQC,GAAkBH,EAAAA,EAAAA,GAAOC,EAAAA,GAAPD,CAAH,kGAIxB,YAAgB,IAAbE,EAAY,EAAZA,MAEH,MAAkB,UAAVA,EAAoBA,EAAO,wBAElC,IAGQE,GAAsBJ,EAAAA,EAAAA,GAAOC,EAAAA,GAAPD,CAAH,kGAI5B,YAAgB,IAAbE,EAAY,EAAZA,MAEH,MAAkB,UAAVA,EAAoBA,EAAO,wBAElC,G,0KCvBQG,EAAY,WAIjB,IAAMC,GAAWC,EAAAA,EAAAA,MACrB,GAAsDC,EAAAA,EAAAA,WAAS,GAA/D,eAAOC,EAAP,KAA4BC,EAA5B,KACA,GAA8DF,EAAAA,EAAAA,WAAS,GAAvE,eAAOG,EAAP,KAAgCC,EAAhC,KAEMC,EAAmBC,EAAAA,KAAaC,MAAM,CAExCC,MAAOF,EAAAA,KAAaE,OAAM,WAAM,IAAEC,UAAS,WAAM,IACjDC,SAAUJ,EAAAA,KAAaG,UAAS,WAAM,MAyB1C,OACI,4BACI,SAAC,KAAD,KACA,SAAC,KAAD,CACIJ,iBAAkBA,EAClBM,cAAe,CACXH,MAAO,GACPE,SAAU,IAEdE,SA9BS,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UAC5B,IAAKD,EAAOL,QAAUK,EAAOH,SAUzB,OATAK,QAAQC,IAAIH,GACZI,EAAAA,GAAAA,MAAA,6BAAyC,CAAEC,SAAU,OAGpDL,EAAOL,MAAyCN,GAAuB,GAAtDA,GAAuB,QACxCW,EAAOH,SAAgDN,GAA2B,GAA9DA,GAA2B,IAMpDW,QAAQC,IAAIH,GACZf,GAASqB,EAAAA,EAAAA,IAAMN,IACfX,GAAuB,GACvBE,GAA2B,GAC3BU,GAEH,EAKO,SAQK,kBACG,UAAC,KAAD,YAGI,mBAAOM,QAAQ,QAAf,mBACA,SAAC,KAAD,CAAiBC,KAAK,QAAQC,KAAK,QAAQC,GAAG,QAAQ7B,MAAOO,EAAoBuB,cACjF,SAAC,KAAD,CAAcF,KAAK,cAEnB,mBAAOF,QAAQ,WAAf,sBACA,SAAC,KAAD,CAAqBC,KAAK,WAAWC,KAAK,WAAWC,GAAG,WAAW7B,MAAOS,EAAwBqB,cAClG,SAAC,KAAD,CAAcF,KAAK,iBAEnB,SAACG,EAAA,EAAD,CAAQJ,KAAK,SAAUK,QAAQ,WAAWC,KAAK,QAAQC,MAAM,YAA7D,sBAZP,MAkBhB,E,UCrDD,EAlBc,WAIV,OAEI,4BACI,SAACC,EAAA,EAAD,WACI,wCAGJ,SAAChC,EAAD,MAKX,C","sources":["components/RegisterForm/RegisterForm.styled.jsx","components/LoginForm/LoginForm.jsx","pages/Login.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Field } from 'formik';\n\n\nexport const InputStyledName = styled(Field)`\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  padding: 8px;\n  ${({ error }) => {\n    \n    return  error === \"false\" ? error :'border: 1px solid red;'\n    \n    }}\n`;\n\nexport const InputStyledMail = styled(Field)`\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  padding: 8px;\n  ${({ error }) => {\n    \n    return  error === \"false\" ? error :'border: 1px solid red;'\n    \n    }}\n`;\n\nexport const InputStyledPassword = styled(Field)`\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  padding: 8px;\n  ${({ error }) => {\n    \n    return  error === \"false\" ? error :'border: 1px solid red;'\n    \n    }}\n`;","import { Formik, Form,  ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport toast, { Toaster } from 'react-hot-toast';\nimport Button from '@mui/material/Button';\nimport {InputStyledMail, InputStyledPassword } from \"../RegisterForm/RegisterForm.styled\"\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { logIn } from 'redux/auth/operations';\n\n\n\nexport const LoginForm = () => { \n   \n    \n\n        const dispatch = useDispatch();\n    const [errorValidationMail, setErrorValidationMail] = useState(false);\n    const [errorValidationPassword, setErrorValidationPassword] = useState(false);\n\n    const validationSchema = Yup.object().shape({\n        \n        email: Yup.string().email(()=>{}).required(()=>{}),\n        password: Yup.string().required(()=>{}),\n    });\n\n\n    const handleSubmit = (values, { resetForm }) => {\n        if (!values.email || !values.password) {\n            console.log(values)\n            toast.error(`Please fill in all fields!`,{ duration: 1500 })\n            \n           \n            !values.email ?   setErrorValidationMail(true) : setErrorValidationMail(false) ;\n            !values.password ?   setErrorValidationPassword(true) : setErrorValidationPassword(false) ;\n            \n\n\n            return;\n        }\n        console.log(values);\n        dispatch(logIn(values))\n        setErrorValidationMail(false)\n        setErrorValidationPassword(false);\n        resetForm();\n\n    };\n\n    return (\n        <div>\n            <Toaster />\n            <Formik\n                validationSchema={validationSchema}\n                initialValues={{\n                    email: '',\n                    password: '',\n                }}\n                onSubmit={handleSubmit}\n            >\n                {() => (\n                    <Form>\n\n\n                        <label htmlFor=\"email\">Email\n                        <InputStyledMail type=\"email\" name=\"email\" id=\"email\" error={errorValidationMail.toString()} />\n                        <ErrorMessage name=\"email\" /></label>\n\n                        <label htmlFor=\"password\">Password\n                        <InputStyledPassword type=\"password\" name=\"password\" id=\"password\" error={errorValidationPassword.toString()} />\n                        <ErrorMessage name=\"password\" /></label>\n\n                        <Button type='submit'  variant=\"outlined\" size=\"small\" color=\"secondary\" >Log In</Button>\n                    </Form>\n                )}\n            </Formik>\n        </div>\n    );\n};\n","import { LoginForm } from 'components/LoginForm/LoginForm';\nimport { Helmet } from 'react-helmet';\n\n\n\nconst Login = () => {\n    \n\n\n    return (\n        \n        <div>\n            <Helmet>\n                <title>Login</title>\n            </Helmet>\n\n            <LoginForm />\n        </div>\n    )\n\n\n};\n\nexport default Login;"],"names":["InputStyledName","styled","Field","error","InputStyledMail","InputStyledPassword","LoginForm","dispatch","useDispatch","useState","errorValidationMail","setErrorValidationMail","errorValidationPassword","setErrorValidationPassword","validationSchema","Yup","shape","email","required","password","initialValues","onSubmit","values","resetForm","console","log","toast","duration","logIn","htmlFor","type","name","id","toString","Button","variant","size","color","Helmet"],"sourceRoot":""}